
#!/usr/bin/env bash
set -euo pipefail

# Run from packages/email
if [[ ! -f package.json ]] || ! grep -q '"name": "@ashgw/email"' package.json; then
  echo "Run this from packages/email"
  exit 1
fi

# Remove unused auth templates
rm -f \
  src/templates/auth/PasswordChanged.tsx.tsx \
  src/templates/auth/PasswordChanged.tsx \
  src/templates/auth/AccountDeletionRequested.tsx \
  src/templates/auth/ChangeEmailConfirm.tsx \
  src/templates/auth/SignInAlert.tsx || true

mkdir -p src/templates/auth

# Write src/senders.ts (minimal API exactly matching BetterAuth usage)
cat > src/senders.ts <<'TS'
import * as React from "react";
import { render } from "@react-email/render";
import { emailService } from "./email.service";
import type { Recipient } from "./types";

import VerifyEmailTemplate from "./templates/auth/VerifyEmail";
import ResetPasswordTemplate from "./templates/auth/ResetPassword";
import EmailIsVerifiedTemplate from "./templates/auth/EmailIsVerified";
import AccountDeletedTemplate from "./templates/auth/AccountDeleted";

/** Params used by the public API */
export interface VerifyEmailParams {
  readonly to: Recipient;
  readonly verifyUrl: string;
  readonly userName?: string;
}
export interface EmailIsVerifiedParams {
  readonly to: Recipient;
  readonly userName?: string;
}
export interface ResetPasswordParams {
  readonly to: Recipient;
  readonly resetUrl: string;
  readonly userName?: string;
}
export interface AccountDeletedParams {
  readonly to: Recipient;
  readonly userName?: string;
  readonly time?: string;
}

/** Minimal senders for the exact flows you wired in BetterAuth */
export class EmailSenders {
  public readonly auth = {
    verifyEmail: async (params: VerifyEmailParams) => {
      const html = await render(React.createElement(VerifyEmailTemplate, params), { pretty: true });
      return emailService.sendHtml({ to: params.to, subject: "Verify your email", html });
    },

    afterVerification: async (params: EmailIsVerifiedParams) => {
      const html = await render(React.createElement(EmailIsVerifiedTemplate, params), { pretty: true });
      return emailService.sendHtml({ to: params.to, subject: "Email verified", html });
    },

    resetPassword: async (params: ResetPasswordParams) => {
      const html = await render(React.createElement(ResetPasswordTemplate, params), { pretty: true });
      return emailService.sendHtml({ to: params.to, subject: "Reset your password", html });
    },

    accountDeleted: async (params: AccountDeletedParams) => {
      const html = await render(React.createElement(AccountDeletedTemplate, params), { pretty: true });
      return emailService.sendHtml({ to: params.to, subject: "Your account has been deleted", html });
    },
  };

  // Flat methods that your BetterAuth config calls
  public sendVerifyEmail = (p: VerifyEmailParams) => this.auth.verifyEmail(p);
  public sendEmailIsVerified = (p: EmailIsVerifiedParams) => this.auth.afterVerification(p);
  public sendResetPassword = (p: ResetPasswordParams) => this.auth.resetPassword(p);
  public sendAccountDeleted = (p: AccountDeletedParams) => this.auth.accountDeleted(p);
}

export const email = new EmailSenders();

export const sendVerifyEmail = (p: VerifyEmailParams) => email.sendVerifyEmail(p);
export const sendEmailIsVerified = (p: EmailIsVerifiedParams) => email.sendEmailIsVerified(p);
export const sendResetPassword = (p: ResetPasswordParams) => email.sendResetPassword(p);
export const sendAccountDeleted = (p: AccountDeletedParams) => email.sendAccountDeleted(p);
TS

# Write src/index.ts
cat > src/index.ts <<'TS'
export { NotificationType } from "./types";
export {
  email,
  EmailSenders,
  sendVerifyEmail,
  sendEmailIsVerified,
  sendResetPassword,
  sendAccountDeleted,
  type VerifyEmailParams,
  type EmailIsVerifiedParams,
  type ResetPasswordParams,
  type AccountDeletedParams,
} from "./senders";
TS

# Update src/test.ts to match the flat API (keeps your style)
cat > src/test.ts <<'TS'
import { env } from "@ashgw/env";
import { email } from "./index";
import { logger } from "@ashgw/logger";

async function main(): Promise<void> {
  await email.sendVerifyEmail({
    to: env.PERSONAL_EMAIL,
    verifyUrl: `${env.NEXT_PUBLIC_BLOG_URL}/verify?token=example`,
    userName: "AG",
  });
  logger.info("Sent verify email");
}

void main();
TS

echo "Done. Removed unused auth templates and rewired senders/index/test."

