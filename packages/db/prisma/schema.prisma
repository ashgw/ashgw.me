
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

enum PostCategory {
  SOFTWARE
  HEALTH
  PHILOSOPHY
}

enum ResourceType {
  POST
}

enum UploadType {
  IMAGE
  AUDIO
  OTHER
}

enum UserRole {
  ADMIN
  VISITOR
}

model Post {
  slug          String       @id @db.VarChar(255)
  title         String       @db.VarChar(30)
  summary       String       @db.VarChar(100)
  firstModDate  DateTime     @default(now())
  lastModDate   DateTime     @updatedAt
  isReleased    Boolean
  minutesToRead Int          @db.SmallInt
  tags          String[]     @db.VarChar(255)
  category      PostCategory
  mdxText       String       @db.Text
  viewsCount    Int          @default(0)

  viewWindows PostViewWindow[]

  @@index([lastModDate])
  @@index([isReleased, lastModDate])
}

model TrashPost {
  id            String       @id @default(cuid())
  originalSlug  String       @db.VarChar(255)
  title         String       @db.VarChar(30)
  summary       String       @db.VarChar(100)
  firstModDate  DateTime
  lastModDate   DateTime
  wasReleased   Boolean
  minutesToRead Int          @db.SmallInt
  tags          String[]     @db.VarChar(255)
  category      PostCategory
  mdxText       String       @db.Text
  deletedAt     DateTime     @default(now())

  @@index([originalSlug])
  @@index([deletedAt])
}

model PostViewWindow {
  id          String   @id @default(cuid())
  postSlug    String   @db.VarChar(255)
  fingerprint String   @db.VarChar(64) // hash(slug:ip:ua)
  bucketStart DateTime @db.Timestamptz(6) // start of 24h bucket (UTC midnight)
  post        Post     @relation(fields: [postSlug], references: [slug], onDelete: Cascade)

  @@unique([postSlug, fingerprint, bucketStart])
  @@index([bucketStart])
  @@index([postSlug, bucketStart])
}

model Upload {
  key         String       @id @db.VarChar(512)
  type        UploadType
  entityType  ResourceType @default(POST)
  contentType String       @db.VarChar(100)
  uploadedAt  DateTime     @default(now())
}


model User {
  id            String       @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  role          UserRole @default(VISITOR)

  @@unique([email])
}

model Session {
  id            String       @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id            String       @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Verification {
  id            String       @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}
