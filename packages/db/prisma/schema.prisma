generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../src/generated/client"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./erd_diagram.md"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


model Post {
  slug           String         @id @db.VarChar(255) // will show in the URL, unique for all posts
  title          String         @db.VarChar(200)
  seoTitle       String         @db.VarChar(300)
  summary        String         @db.VarChar(300) // can or cannot be the same as the SEO title
  firstModDate   DateTime       @db.Timestamp(3)
  lastModDate    DateTime       @updatedAt @db.Timestamp(3)
  isReleased     Boolean        
  minutesToRead  Int            @db.SmallInt
  tags           String[]       @db.VarChar(15) //  keep them smol for aesthetics
  category       PostCategory
  uploads        Upload[]       @relation("PostUploads") // voice, mdx, image, audio & basically any blob inside the post
} 

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  name          String?          @db.VarChar(255)
  permissions   UserPermission[]
}

model UserPermission {
  id            String           @id @default(cuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String           @db.VarChar(255)
  action        ActionType
  resource      ResourceType

  @@unique([userId, action, resource]) // e.g. isUserAllowed(userId, 'read', 'post')
  @@index([userId])
}


enum PostCategory {
  SOFTWARE
  HEALTH
  PHILOSOPHY
}

enum ActionType {
  READ
  WRITE
  EDIT
  DELETE
  PUBLISH
}

enum ResourceType {
  POST
}

enum UploadType {
  IMAGE
  AUDIO
  MDX
}

// using using s3 buckets rn
model Upload {
  id            String           @id @default(cuid())
  key           String           @unique @db.VarChar(512) // s3 key
  url           String           @db.VarChar(1024)
  type          UploadType
  entityType    ResourceType     @default(POST)
  contentType   String           @db.VarChar(100) // e.g. image/png, audio/mpeg, video/mp4, text/markdown
  size          Int
  uploadedAt    DateTime         @default(now())
  entityId      String?          @db.VarChar(255)
  post          Post?            @relation("PostUploads", fields: [entityId], references: [slug])
  @@index([entityId])
}
