---
description: Logging & Monitoring Practices
globs: *.tsx, *.ts
---

We use a centralized logger defined in the `@ashgw/logger` package. This ensures consistent, structured logging throughout the codebase for better maintainability.

---

## Logger Usage

Always import the logger from the package:

```ts
import { logger } from "@ashgw/logger";
```

---

## Sentry Integration

## Sentry is used for error tracking and performance monitoring. Whenever an error occurs it bubbles up and gets caught by Sentry.

## Best Practices

- **Never EVER use `console`** to log anything, always use the logger  
  Always use the centralized logger to benefit from log levels, structured output, and centralized control.

- **Use appropriate log levels**

  ```ts
  import { logger } from "@ashgw/logger";

  logger.info("Informational message");
  logger.warn("Warning message");
  logger.error("Error message", error);
  ```

---

## Error Handling

+When catching errors, log them only, don't report to sentry since erorrs bubble up to `tRPC` or `ts-rest` handlers anyway and get reported there through sentry, use logging so we know what's happening
