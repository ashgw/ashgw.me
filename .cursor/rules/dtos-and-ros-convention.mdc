---
description: Dealing with DTOs and ROs (API contracts)
globs: 
alwaysApply: false
---
# DTO Conventions

This document outlines the conventions for Data Transfer Objects (DTOs) in our codebase.

### Naming Conventions

DTOs follow a strict naming pattern:
- Zod Schemas: `<entity><action>SchemaDto`
- TypeScript Types: `<entity><action>Dto`

Example:
```ts
// Schema
export const userCreateSchemaDto = z.object({...});

// Type
export type UserCreateDto = z.infer<typeof userCreateSchemaDto>;
```

### File Structure

Each DTO file should be organized as follows:

1. File naming: `dtos.ts` within the model's directory
2. Comments section dividers using `// ========== Section ==========`
3. Schemas section first, followed by Types section
4. Import `zod` at the top of the file

### Schema Validation Rules

When creating Zod schemas:
- Always add validation rules with meaningful constraints
- Include comments explaining validation rules when not obvious
- Use `nativeEnum` for enum validations
- String validations should specify `min` and `max` lengths
- Array validations should specify size constraints if applicable

Example from [apps/blog/src/api/models/post/dtos.ts](mdc:apps/blog/src/api/models/post/dtos.ts):
```ts
export const postEditorSchemaDto = z.object({
  title: z.string().min(2), // min length for meaningful titles
  summary: z.string().max(120).min(20), // SEO-friendly length
  tags: z.array(z.string().max(10).min(1)), // size constraints for UI
});
```

### Type Generation

Always derive TypeScript types from Zod schemas using `z.infer`:
```ts
export type PostEditorDto = z.infer<typeof postEditorSchemaDto>;
```

### Best Practices

1. Group related DTOs in the same file
2. Keep validation logic in the schema, not in the type
3. Use descriptive action names (Create, Update, Get, Delete, etc.)
4. Document special validation rules with comments
5. Export both schema and type for each DTO