**Description**: Rules for adding new components and/or removing existing ones  
**Globs**: `**/*.tsx`

### Component Architecture Guidelines

In this monorepo, every application under `apps/` follows a strict and consistent component structure. These rules ensure clarity, maintainability, and compatibility with AI tools like Cursor.


### Page Structure

Each `page.tsx` file inside `app/(pages)/` should be minimal and declarative. It must not contain inline JSX or any logic unrelated to routing or metadata.

Responsibilities of a `page.tsx` file:

- Import `Metadata` and define `generateMetadata` (or export `metadata`)
- Configure static/dynamic generation
- Return a single root component from `components/pages/{route}/index.tsx`

Example:

```ts
import type { Metadata } from "next";
import { createMetadata } from "@ashgw/seo";
import { AboutPage } from "~/app/components/pages/about";

export const metadata: Metadata = createMetadata({
  title: "About",
  description: "About me.",
});

export default function Page() {
  return <AboutPage />;
}
```

---

### Component Directory Convention

Each app should have a `components/` directory structured as follows:

- `components/pages/{route}/index.tsx` → root component for the route
- `components/pages/{route}/components/` → subcomponents used exclusively by that page
- `components/misc/` → shared components within the app (e.g., layouts, providers, wrappers, animations)

All route-specific components must live under their own scoped folder inside `pages/`. They must **not** be reused outside their page.  
All app-wide shared components live in `misc/`. They are app-scoped, not monorepo-shared.

---

### Shared Component Scope (Monorepo)

Shared components that are used across multiple apps (e.g. Navbar, Footer, CookieBanner) should live in the `@ashgw/components` package. These are composed, reusable components and are **not** part of the design system.

The design system (e.g. `@ashgw/ui`) is reserved for atomic, stateless primitives such as:

- Buttons
- Text fields
- Layout containers
- Typography components

The design system must remain stable, version-controlled, and guarded by CI rules. Composed UI must not be added to the design system.

---

### Import Style Rules

To maintain clarity and separation of concerns, the following import rules apply:

- Internal packages (shared across the monorepo) must use the `@` prefix.  
  Example: `@ashgw/seo`, `@ashgw/ui`, `@ashgw/components`
- App-local imports must use the `~` alias.  
  Example: `~/app/components/pages/about`

This distinction makes the source of a module instantly recognizable when scanning code.

---

### Example Structure (Simple App)

```
apps/
  my-app/
    src/
      app/
        (pages)/
          about/
            page.tsx
        components/
          pages/
            about/
              index.tsx
              components/
                MajorHeading.tsx
                MinorHeading.tsx
          misc/
            layout/
              LayoutWrapper.tsx
              Providers.tsx
```

Monorepo shared packages:

```
packages/
  ui/         ← atomic design system components only, in this case it's shadcn/ui
  components/ ← composed UI elements used across apps, e.g. Navbar, Footer, CookieBanner
  seo/        ← metadata helpers and schema
  ... etc 
```

---

### IMPORTANT Rules

- DO NOT place more than one React component per file.
- Components with subcomponents must use a `components/` folder beside `index.tsx`.
- Avoid `../` relative imports that escape the component’s scope.
---