---
description: Component Architecture Guidelines
globs: **/*
---
In this monorepo, every application under `apps/` or `packages/` follows a strict and consistent component structure. These rules ensure clarity, maintainability, and compatibility with AI tools like Cursor.

---

### Page Structure

Each `page.tsx` file inside `app/(pages)/` should be minimal and declarative. It must not contain inline JSX or any logic unrelated to routing or metadata.

Responsibilities of a `page.tsx` file:

- Import `Metadata` and define `generateMetadata` (or export `metadata`) using the dedictated seo package
- Configure static/dynamic generation if applies
- Do server side fetching if applies
- Return a single root component from `components/pages/{route}/index.tsx`

Example:

```ts
import type { Metadata } from "next";
import { createMetadata } from "@ashgw/seo";
import { AboutPage } from "~/app/components/pages/about";

export const metadata: Metadata = createMetadata({
  title: "About",
  description: "About me.",
});

export default function Page() {
  return <AboutPage />;
}
```

---

### Component Directory Convention

Each app must have a `components/` directory structured as follows:

- `components/pages/{route}/index.tsx` → root component for the route
- `components/pages/{route}/components/` → subcomponents used exclusively by that page
- `components/misc/` → shared components within the app (e.g., layouts, wrappers, animations, providers)

Rules:

- Route-specific components live only under their own `pages/{route}` scope — not reused outside.
- Shared app-level components go under `misc/` — do not cross apps.
- If one component is used across apps, then insert it under the `packages/components` directory. The same structure applies.
- Do **NOT** place more than one React component per file.
- Components with subcomponents must use a `components/` folder beside `index.tsx`.
- Avoid `../` imports that escape component scope. If it needs to be shared make it shared.

---

### Shared Component Scope (Monorepo)

Shared components used across multiple apps (e.g. Navbar, Footer) go in the `@ashgw/components` package. These are composed UI elements.

The `@ashgw/ui` package is the **design system**, and should only contain:

- Stateless primitives (Button, TextField, Box, Typography)
- No composed UI allowed
---

### Import Style Rules

Use clear, predictable import aliases:

- `@` → monorepo-level internal packages (`@ashgw/seo`, `@ashgw/ui`, etc.) or installed packages e.g `@sentry/nextjs`
- `~` → app-local files (`~/app/components/pages/about`)
- Avoid `../` outside component scope

---

### Example Structure (Simple App)

```
apps/
  my-app/
    src/
      app/
        (pages)/
          about/
            page.tsx
        components/
          pages/
            about/
              index.tsx
              components/
                MajorHeading.tsx
                MinorHeading.tsx
          misc/
            layout/
              components
                LayoutWrapper.tsx
                Providers.tsx
              index.tsx
```

```
packages/
  ui/         ← atomic design system components only (shadcn/ui-based)
  components/ ← composed UI used across apps (Navbar, Footer, etc.)
  seo/        ← metadata helpers
  ... etc
```

---

### Function Rules

- ❌ Do **NOT** use positional args if function takes 2+ inputs.
- ✅ Always wrap inputs in a single object:

```ts
// Good
function createPrompt({ prompt, userId, sectionId }: { prompt: string, userId: string, sectionId: string }) {}

// Bad
function createPrompt(prompt, userId, sectionId) {}
```

- ✅ Prefer `interface` for simple objects.
- ✅ Use `type` for unions/intersections or more complex shapes.

---

### Class Rules

Class method structure must be strictly ordered:

0. Class veriables on top
1. Getters / Setters below them
2. Public methods below them
3. Private methods (always go at the bottom) and prefixed with _ e.g: private async _checkUserExists(), NOT private async checkUserExists() 

Always specify:

- `async`
- `static`
- `override`
- `private` / `public`

If applies 

Example:

```ts
class SomeService {

  ATTEMPTS = 3
  get id() {}
  set userId(userId: string){

  }
  public async runTask() {}
  public static parse() {}

  private _validate() {}
}
```

---

### Naming & Exports

- ✅ React components must use **PascalCase** filenames.
- ❌ **Never** use `export default`. Always use **named exports**.
- ✅ ALWAYS have ONE and ONLY component per file ONLY.

---

### Third-Party Rules

- ❌ **Do NOT** install any third-party package (e.g. `framer-motion`, `lucide`, etc.) unless approved first.
---