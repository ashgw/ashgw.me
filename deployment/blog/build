#!/usr/bin/env bash
set -euo pipefail

usage() {
  echo "Usage: $0 --env [preview|production] --service <service> --image <image>"
  echo "Example: $0 --env production --service blog --image ghcr.io/ashgw/blog:production"
  exit 1
}

ENV=""; SERVICE=""; IMAGE=""

REQUIRED_ENV_VARS=(
  DATABASE_URL
  S3_BUCKET_NAME
  S3_BUCKET_REGION
  S3_BUCKET_ACCESS_KEY_ID
  S3_BUCKET_SECRET_KEY
  S3_BUCKET_URL
  KIT_API_KEY
  IP_HASH_SALT
  NEXT_PUBLIC_WWW_URL
  NEXT_PUBLIC_BLOG_URL
  NEXT_PUBLIC_SENTRY_DSN
  NEXT_PUBLIC_POSTHOG_KEY
  NEXT_PUBLIC_POSTHOG_HOST
)

while [[ $# -gt 0 ]]; do
  case "$1" in
    --env)      [[ $# -lt 2 ]] && usage; ENV="$2"; shift 2 ;;
    --service)  [[ $# -lt 2 ]] && usage; SERVICE="$2"; shift 2 ;;
    --image)    [[ $# -lt 2 ]] && usage; IMAGE="$2"; shift 2 ;;
    *) echo "Error: unknown argument '$1'"; usage ;;
  esac
done

[[ -z "$ENV" || -z "$SERVICE" || -z "$IMAGE" ]] && { echo "Error: --env, --service and --image are required"; usage; }

case "$ENV" in
  preview)    IS_PREVIEW="true" ;;
  production) IS_PREVIEW="false" ;;
  *) echo "Error: invalid --env '$ENV'"; usage ;;
esac

DOCKERFILE="deployment/$SERVICE/Dockerfile"
[[ -f "$DOCKERFILE" ]] || { echo "Error: Dockerfile not found for service '$SERVICE' ($DOCKERFILE)"; exit 1; }

require_envs() {
  local missing=()
  for name in "${REQUIRED_ENV_VARS[@]}"; do
    # ${!name-} expands to value or empty without tripping set -u
    if [[ -z "${!name-}" ]]; then
      missing+=("$name")
    fi
  done
  if (( ${#missing[@]} )); then
    echo "Missing required environment variables:"
    for m in "${missing[@]}"; do echo "  - $m"; done
    exit 1
  fi
}

build_secret_flags() {
  local flags=()
  for name in "${REQUIRED_ENV_VARS[@]}"; do
    flags+=( "--secret" "id=$name,env=$name" )
  done
  printf '%s\0' "${flags[@]}"
}

echo "Checking environment..."
require_envs

echo "Building image: $IMAGE"
echo "Dockerfile: $DOCKERFILE"
echo "IS_PREVIEW: $IS_PREVIEW"
echo "Secrets: ${#REQUIRED_ENV_VARS[@]} vars"


mapfile -d '' SECRET_FLAGS < <(build_secret_flags)

export DOCKER_BUILDKIT=1
docker build \
  --build-arg "IS_PREVIEW=$IS_PREVIEW" \
  "${SECRET_FLAGS[@]}" \
  -t "$IMAGE" -f "$DOCKERFILE" .
