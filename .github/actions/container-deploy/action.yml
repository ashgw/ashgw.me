name: Container Deployment

description: Build and deploy container image

inputs:
  deployment_environment:
    description: "Environment, either 'production' or 'preview' (this will determine which image is pushed and where it redeploys)"
    required: true
    default: "preview"
  app_name:
    description: "App name, either 'blog' or 'www' or whatever app you're running"
    required: true
  NOTIFY_TOKEN:
    description: "Notify token"
    required: true
  CONTAINER_DEPLOYMENT_SERVICE_TOKEN:
    description: "API token"
    required: true
  GITHUB_TOKEN:
    description: "GitHub token with packages:write for GHCR and PR comments"
    required: true

runs:
  using: "composite"
  steps:
    - name: Login to GHCR
      shell: bash
      run: |
        echo "${{ inputs.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

    - name: Build image with script
      shell: bash
      run: |
        set -euo pipefail
        IMAGE="ghcr.io/${{ github.repository_owner }}/${{ inputs.app_name }}:${{ inputs.environment }}"
        ./deployment/${{ inputs.app_name }}/build \
          --env "${{ inputs.environment }}" \
          --service "${{ inputs.app_name }}" \
          --image "$IMAGE"

    - name: Push image (production + latest)
      if: ${{ inputs.environment == 'production' }}
      shell: bash
      run: |
        IMAGE="ghcr.io/${{ github.repository_owner }}/${{ inputs.app_name }}:production"
        LATEST="ghcr.io/${{ github.repository_owner }}/${{ inputs.app_name }}:latest"
        docker push "$IMAGE"
        docker tag "$IMAGE" "$LATEST"
        docker push "$LATEST"

    - name: Push image (preview)
      if: ${{ inputs.deployment_environment == 'preview' }}
      shell: bash
      run: |
        IMAGE="ghcr.io/${{ github.repository_owner }}/${{ inputs.app_name }}:preview"
        docker push "$IMAGE"

    - name: Install Koyeb CLI and redeploy
      shell: bash
      run: |
        # Write Koyeb CLI config
        cat > "$HOME/.koyeb.yaml" << EOF
        debug: false
        organization: ""
        token: ${{ inputs.CONTAINER_DEPLOYMENT_SERVICE_TOKEN }}
        url: https://app.koyeb.com
        EOF

        # Install CLI
        curl -fsSL https://raw.githubusercontent.com/koyeb/koyeb-cli/master/install.sh | sh
        export PATH="$HOME/.koyeb/bin:$PATH"

        # Choose target
        if [[ "${{ inputs.deployment_environment }}" == "production" ]]; then
          echo "Deploying to production environment"
          DEPLOY_TARGET="${{ inputs.app_name }}/${{ inputs.app_name }}"
        elif [[ "${{ inputs.deployment_environment }}" == "preview" ]]; then
          echo "Deploying to preview environment"
          DEPLOY_TARGET="${{ inputs.app_name }}-preview/${{ inputs.app_name }}-preview"
        else
          echo "Unknown environment: ${{ inputs.deployment_environment }}"
          exit 1
        fi

        # Redeploy
        koyeb service redeploy "$DEPLOY_TARGET"

    - name: Notify about preview deployment
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
      env:
        DEPLOYED_APP: ${{ inputs.app_name }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const app = process.env.DEPLOYED_APP;
          const body = [
            `## ${app} Preview Deployment Ready!`,
            ``,
            `### App: \`${app}\``,
            ``,
            `**Preview URL:** [Check it out here](https://${app}-preview.ashgw.me)`,
            ``,
            `---`,
            `> This preview environment reflects the changes in this PR. It deploys this version of the app as soon as the "deploy-preview" label is added.`
          ].join("\n");
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body
          });

    - name: Notify • deploy ok
      if: success()
      uses: ashgw/notify@main
      with:
        token: ${{ inputs.NOTIFY_TOKEN }}
        title: "deploy: ${{ inputs.app_name }} ${{ inputs.deployment_environment }} ok"
        message: >-
          Koyeb redeploy succeeded for `${{ inputs.app_name }}` → `${{ inputs.deployment_environment }}`.
          Actor: @${{ github.actor }}
          Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Notify • deploy fail
      if: failure()
      uses: ashgw/notify@main
      with:
        token: ${{ inputs.NOTIFY_TOKEN }}
        title: "deploy: ${{ inputs.app_name }} ${{ inputs.deployment_environment }} fail"
        message: >-
          Koyeb redeploy failed for `${{ inputs.app_name }}` → `${{ inputs.deployment_environment }}`.
          Actor: @${{ github.actor }}
          Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
