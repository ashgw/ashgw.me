name: Vercel Deployment

description: Deploy to Vercel and set the URL

inputs:
  deployment_environment:
    description: "Environment: 'production' or 'preview'"
    required: true
  app_name:
    description: "App dir / project name, e.g. 'www' or 'blog'"
    required: true
  GITHUB_TOKEN:
    description: "GitHub token"
    required: true
  INTERNAL_NOTIFICATION_TOKEN:
    description: "Notify token"
    required: true
  VERCEL_TOKEN:
    description: "Vercel token"
    required: true
  VERCEL_ORG_ID:
    description: "Vercel org ID"
    required: true
  VERCEL_PROJECT_ID:
    description: "Vercel project ID"
    required: true

runs:
  using: "composite"
  steps:
    - name: Capture start timestamp
      id: start
      shell: bash
      run: |
        echo "start_ts=$(date +%s)" >> "$GITHUB_OUTPUT"

    - name: Build and deploy for Vercel
      id: deploy
      shell: bash
      env:
        VERCEL_TOKEN: ${{ inputs.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ inputs.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ inputs.VERCEL_PROJECT_ID }}
      run: |
        set -euo pipefail

        APP="${{ inputs.app_name }}"
        ENVIRONMENT="${{ inputs.deployment_environment }}"

        echo "→ Pull env: $ENVIRONMENT"
        pnpm vercel pull --yes --environment="$ENVIRONMENT" --token="$VERCEL_TOKEN"

        echo "→ Build ($ENVIRONMENT)"
        if [ "$ENVIRONMENT" = "production" ]; then
          pnpm vercel build --prod --yes --token="$VERCEL_TOKEN"
          echo "→ Deploy (prebuilt, prod)"
          DEPLOY_OUTPUT="$(pnpm vercel deploy --prebuilt --prod --yes --token="$VERCEL_TOKEN")"
          DEPLOY_URL="$(printf '%s\n' "$DEPLOY_OUTPUT" | awk '/^Production: /{print $2}' | tail -n1)"
        else
          pnpm vercel build --yes --token="$VERCEL_TOKEN"
          echo "→ Deploy (prebuilt, preview)"
          DEPLOY_OUTPUT="$(pnpm vercel deploy --prebuilt --yes --token="$VERCEL_TOKEN")"
          DEPLOY_URL="$(printf '%s\n' "$DEPLOY_OUTPUT" | awk '/^Preview: /{print $2}' | tail -n1)"
        fi

        # Fallback: grab the last URL if format changes
        if [ -z "${DEPLOY_URL:-}" ]; then
          DEPLOY_URL="$(printf '%s\n' "$DEPLOY_OUTPUT" | grep -Eo 'https?://[^ ]+' | tail -n1 || true)"
        fi
        if [ -z "${DEPLOY_URL:-}" ]; then
          echo "::error::Failed to parse deployment URL"
          echo "$DEPLOY_OUTPUT"
          exit 1
        fi

        echo "→ Deployed: $DEPLOY_URL"
        echo "DEPLOY_URL=$DEPLOY_URL" >> "$GITHUB_ENV"
        echo "::notice title=${ENVIRONMENT} URL::$DEPLOY_URL"
        echo "deploy_url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"

    - name: Capture end timestamp
      id: end
      shell: bash
      run: |
        echo "end_ts=$(date +%s)" >> "$GITHUB_OUTPUT"

    - name: Compute duration
      id: duration
      shell: bash
      run: |
        echo "seconds=$(( ${{ steps.end.outputs.end_ts }} - ${{ steps.start.outputs.start_ts }} ))" >> "$GITHUB_OUTPUT"

    - name: Notify about the deployment URL
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
      uses: actions/github-script@v7
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        DEPLOYMENT_ENVIRONMENT: ${{ inputs.deployment_environment }}
        DEPLOYED_APP: ${{ inputs.app_name }}
        DEPLOY_URL: ${{ steps.deploy.outputs.deploy_url }}
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ${process.env.DEPLOYMENT_ENVIRONMENT} Deployment Ready

            **App:** \`${process.env.DEPLOYED_APP}\`

            **${process.env.DEPLOYMENT_ENVIRONMENT} URL:** [${process.env.DEPLOY_URL}](${process.env.DEPLOY_URL})

            ---
            This ${process.env.DEPLOYMENT_ENVIRONMENT} environment reflects the changes in this PR.`
          })

    - name: Notify • Deploy OK
      if: success()
      uses: ashgw/notify@main
      with:
        token: ${{ inputs.INTERNAL_NOTIFICATION_TOKEN }}
        title: "Deployment Succeeded"
        message: |
          ### Details

          - **App:** ${{ inputs.app_name }}
          - **Environment:** ${{ inputs.deployment_environment }}
          - **Actor:** @${{ github.actor }}
          - **Commit:** [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - **Run:** [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Deployment URL:** ${{ env.DEPLOY_URL }}
          - **Duration:** ${{ steps.duration.outputs.seconds }} seconds

          ---
          The application is now live.

    - name: Notify • Deploy Fail
      if: failure()
      uses: ashgw/notify@main
      with:
        token: ${{ inputs.INTERNAL_NOTIFICATION_TOKEN }}
        title: "Deployment Failed"
        message: |
          ### Details
          - **App:** ${{ inputs.app_name }}
          - **Environment:** ${{ inputs.deployment_environment }}
          - **Actor:** @${{ github.actor }}
          - **Commit:** [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - **Run:** [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Duration:** ${{ steps.duration.outputs.seconds }} seconds

          ---
          Redeploy attempt failed. Check workflow logs for details.
