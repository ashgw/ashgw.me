name: CI / DB Migrate

description: Run database migrations

inputs:
  with_deploy:
    required: false
    default: "false"
    description: "Whether to run the deploy step"
  DATABASE_URL:
    required: true
    description: "The database URL"

runs:
  using: "composite"
  steps:
    - name: Set environment variables
      shell: bash
      run: |
        # Mask the database URL in logs
        echo "DATABASE_URL=${{ inputs.DATABASE_URL }}" >> $GITHUB_ENV
        echo "::add-mask::${{ inputs.DATABASE_URL }}"

    - name: Check for schema drift
      shell: bash
      run: |
        # Redirect Prisma output to /dev/null to prevent sensitive info exposure
        pnpm --filter @ashgw/db exec prisma migrate diff \
        --from-url="$DATABASE_URL" \
        --to-schema-datamodel=./prisma/schema.prisma \
        --script > migration.sql 2>&1

        chmod +x .github/scripts/check-migration-safety.sh
        .github/scripts/check-migration-safety.sh migration.sql

    - name: Test migrations in Docker
      shell: bash
      run: |
        # Spin up the containers
        pnpm --filter @ashgw/db start

        # Wait for the database to be ready
        echo "Waiting for database to be ready..."
        sleep 10

        # Set local database URL for testing
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/main"

        # Run migrations reset (this will apply all migrations from scratch)
        echo "Running migration reset..."
        pnpm --filter @ashgw/db migrate:reset --force

        echo "Running seeder..."
        pnpm --filter @ashgw/seeder seed 

        # Validate the migrations
        echo "Validating migrations..."
        pnpm --filter @ashgw/db migrate:status

        # Store the exit code
        MIGRATION_TEST_STATUS=$?

        # Spin down the containers
        echo "Cleaning up..."
        pnpm --filter @ashgw/db stop

        # Exit with the status from migration validation
        exit $MIGRATION_TEST_STATUS

    - name: Run migrations
      if: ${{ inputs.with_deploy == 'true' }}
      shell: bash
      run: |
        # Filter out sensitive information from Prisma output
        pnpm --filter @ashgw/db exec prisma migrate deploy 2>&1 | grep -v "Datasource" | grep -v "database" | grep -v "schema" | grep -v "at"

    - name: Validate migrations
      if: ${{ inputs.with_deploy == 'true' }}
      shell: bash
      run: |
        # Filter out sensitive information from Prisma output
        pnpm --filter @ashgw/db exec prisma migrate status 2>&1 | grep -v "Datasource" | grep -v "database" | grep -v "schema" | grep -v "at"
